networks:
  postgres-cluster-network:
    driver: bridge

services:
  postgres-master:
    build:
      context: ./master
    container_name: postgres-master
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: ${PGDATA}
      REPLICATION_COUNT: ${REPLICATION_COUNT}
    ports:
      - "${MASTER_PORT}:5432"
    volumes:
      - ./master/pgdata:/data
      - ./master/config:/config
      - ./master/archive:/mnt/server/archive
    networks:
      - postgres-cluster-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-slave1:
    build:
      context: ./slave-1
    container_name: postgres-slave1
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: ${PGDATA}
      REPLICATION_USER: ${REPLICATION_USER}
      REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
    ports:
      - "${SLAVE1_PORT}:5432"
    volumes:
      - ./slave-1/pgdata:/data
      - ./slave-1/config:/config
      - ./slave-1/archive:/mnt/server/archive
    networks:
      - postgres-cluster-network
    depends_on:
      postgres-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-slave2:
    build:
      context: ./slave-2
    container_name: postgres-slave2
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: ${PGDATA}
      REPLICATION_USER: ${REPLICATION_USER}
      REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
    ports:
      - "${SLAVE2_PORT}:5432"
    volumes:
      - ./slave-2/pgdata:/data
      - ./slave-2/config:/config
      - ./slave-2/archive:/mnt/server/archive
    networks:
      - postgres-cluster-network
    depends_on:
      postgres-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgpool-loadbalancer:
    # user: root
    image: bitnami/pgpool:latest
    container_name: pgpool-loadbalancer
    ports:
      - "${PGPOOL_PORT}:5432"
    environment:
      PGPOOL_BACKEND_NODES: 0:postgres-master:5432:0,1:postgres-slave1:5432:2,2:postgres-slave2:5432:2
      PGPOOL_SR_CHECK_USER: ${REPLICATION_USER}
      PGPOOL_SR_CHECK_PASSWORD: ${REPLICATION_PASSWORD}
      PGPOOL_HEALTH_CHECK_USER: ${REPLICATION_USER}
      PGPOOL_HEALTH_CHECK_PASSWORD: ${REPLICATION_PASSWORD}
      PGPOOL_HEALTH_CHECK_PERIOD: ${PGPOOL_HEALTH_CHECK_PERIOD}
      PGPOOL_HEALTH_CHECK_TIMEOUT: ${PGPOOL_HEALTH_CHECK_TIMEOUT}
      PGPOOL_HEALTH_CHECK_MAX_RETRIES: ${PGPOOL_HEALTH_CHECK_MAX_RETRIES}
      PGPOOL_ADMIN_USERNAME: ${PGPOOL_ADMIN_USERNAME}
      PGPOOL_ADMIN_PASSWORD: ${PGPOOL_ADMIN_PASSWORD}
      PGPOOL_POSTGRES_USERNAME: ${POSTGRES_USER}
      PGPOOL_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGPOOL_ENABLE_LOAD_BALANCING: "${PGPOOL_ENABLE_LOAD_BALANCING}"
      PGPOOL_ENABLE_LOG_PER_NODE_STATEMENT: "${PGPOOL_ENABLE_LOG_PER_NODE_STATEMENT}"
      PGPOOL_ENABLE_LOG_CONNECTIONS: "${PGPOOL_ENABLE_LOG_CONNECTIONS}"
      PGPOOL_BACKEND_APPLICATION_NAME: "${PGPOOL_BACKEND_APPLICATION_NAME}"
      PGPOOL_BACKEND_FLOW_CONTROL: "${PGPOOL_BACKEND_FLOW_CONTROL}"
      PGPOOL_BACKEND_KEEPALIVE: "${PGPOOL_BACKEND_KEEPALIVE}"
      PGPOOL_BACKEND_KEEPALIVE_COUNT: ${PGPOOL_BACKEND_KEEPALIVE_COUNT}
      PGPOOL_BACKEND_KEEPALIVE_INTERVAL: ${PGPOOL_BACKEND_KEEPALIVE_INTERVAL}
      PGPOOL_BACKEND_KEEPALIVE_MODE: "${PGPOOL_BACKEND_KEEPALIVE_MODE}"
      PGPOOL_CONNECT_TIMEOUT: ${PGPOOL_CONNECT_TIMEOUT}
      PGPOOL_SOCKET_TIMEOUT: ${PGPOOL_SOCKET_TIMEOUT}
      PGPOOL_POOL_MODE: "${PGPOOL_POOL_MODE}"
      PGPOOL_MAX_POOL: ${PGPOOL_MAX_POOL}
      PGPOOL_NUM_INIT_CHILDREN: ${PGPOOL_NUM_INIT_CHILDREN}
      PGPOOL_CHILD_LIFE_TIME: ${PGPOOL_CHILD_LIFE_TIME}
      PGPOOL_CHILD_MAX_CONNECTIONS: ${PGPOOL_CHILD_MAX_CONNECTIONS}
      # Memory Cache settings
      PGPOOL_MEMORY_CACHE_ENABLED: "${PGPOOL_MEMORY_CACHE_ENABLED}"
      PGPOOL_MEMQCACHE_METHOD: "${PGPOOL_MEMQCACHE_METHOD}"
      PGPOOL_MEMQCACHE_TOTAL_SIZE: "${PGPOOL_MEMQCACHE_TOTAL_SIZE}"
      PGPOOL_MEMQCACHE_MAX_NUM_CACHE: "${PGPOOL_MEMQCACHE_MAX_NUM_CACHE}"
      PGPOOL_MEMQCACHE_EXPIRE: "${PGPOOL_MEMQCACHE_EXPIRE}"
      PGPOOL_MEMQCACHE_AUTO_CACHE_INVALIDATION: "${PGPOOL_MEMQCACHE_AUTO_CACHE_INVALIDATION}"
      PGPOOL_MEMQCACHE_MAXCACHE: "${PGPOOL_MEMQCACHE_MAXCACHE}"
      PGPOOL_MEMQCACHE_CACHE_BLOCK_SIZE: "${PGPOOL_MEMQCACHE_CACHE_BLOCK_SIZE}"
      PGPOOL_WHITE_MEMQCACHE_TABLE_LIST: ""
      PGPOOL_BLACK_MEMQCACHE_TABLE_LIST: ""
      # PGPOOL_ENABLE_TLS: "yes"
      # PGPOOL_TLS_CERT_FILE: /opt/bitnami/pgpool/certs/server.crt
      # PGPOOL_TLS_KEY_FILE: /opt/bitnami/pgpool/certs/server.key
    volumes:
      - ./pgpool/certs:/opt/bitnami/pgpool/certs
      - ./pgpool/pgpool.conf:/opt/bitnami/pgpool/conf/pgpool.conf
      - ./pgpool/oiddir:/var/log/pgpool/oiddir
      # - ./pgpool/generate-certs.sh:/docker-entrypoint-initdb.d/generate-certs.sh
    networks:
      - postgres-cluster-network
    depends_on:
      postgres-master:
        condition: service_healthy
      postgres-slave1:
        condition: service_healthy
      postgres-slave2:
        condition: service_healthy
    # entrypoint: ["/bin/bash", "-c", "/docker-entrypoint-initdb.d/generate-certs.sh && /opt/bitnami/scripts/pgpool/entrypoint.sh /opt/bitnami/scripts/pgpool/run.sh"]

